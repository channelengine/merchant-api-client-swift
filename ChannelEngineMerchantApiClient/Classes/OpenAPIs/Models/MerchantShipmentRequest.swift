//
// MerchantShipmentRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct MerchantShipmentRequest: Codable, Hashable {

    /** The unique shipment reference used by the Merchant. */
    public var merchantShipmentNo: String
    /** The unique order reference used by the Merchant. */
    public var merchantOrderNo: String
    public var lines: [MerchantShipmentLineRequest]
    /** Extra data on the order. Each item must have an unqiue key */
    public var extraData: [String: String]?
    /** The unique shipping reference used by the Shipping carrier (track&amp;trace number). */
    public var trackTraceNo: String?
    /** A link to a page of the carrier where the customer can track the shipping of her package. */
    public var trackTraceUrl: String?
    /** The unique return shipping reference that may be used by the Shipping carrier (track &amp; trace number) if the shipment is returned. */
    public var returnTrackTraceNo: String?
    /** Shipment method: the carrier used for shipping the package. E.g. DHL, postNL. */
    public var method: String?
    /** The code of the country from where the package is being shipped. */
    public var shippedFromCountryCode: String?

    public init(merchantShipmentNo: String, merchantOrderNo: String, lines: [MerchantShipmentLineRequest], extraData: [String: String]? = nil, trackTraceNo: String? = nil, trackTraceUrl: String? = nil, returnTrackTraceNo: String? = nil, method: String? = nil, shippedFromCountryCode: String? = nil) {
        self.merchantShipmentNo = merchantShipmentNo
        self.merchantOrderNo = merchantOrderNo
        self.lines = lines
        self.extraData = extraData
        self.trackTraceNo = trackTraceNo
        self.trackTraceUrl = trackTraceUrl
        self.returnTrackTraceNo = returnTrackTraceNo
        self.method = method
        self.shippedFromCountryCode = shippedFromCountryCode
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case merchantShipmentNo = "MerchantShipmentNo"
        case merchantOrderNo = "MerchantOrderNo"
        case lines = "Lines"
        case extraData = "ExtraData"
        case trackTraceNo = "TrackTraceNo"
        case trackTraceUrl = "TrackTraceUrl"
        case returnTrackTraceNo = "ReturnTrackTraceNo"
        case method = "Method"
        case shippedFromCountryCode = "ShippedFromCountryCode"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(merchantShipmentNo, forKey: .merchantShipmentNo)
        try container.encode(merchantOrderNo, forKey: .merchantOrderNo)
        try container.encode(lines, forKey: .lines)
        try container.encodeIfPresent(extraData, forKey: .extraData)
        try container.encodeIfPresent(trackTraceNo, forKey: .trackTraceNo)
        try container.encodeIfPresent(trackTraceUrl, forKey: .trackTraceUrl)
        try container.encodeIfPresent(returnTrackTraceNo, forKey: .returnTrackTraceNo)
        try container.encodeIfPresent(method, forKey: .method)
        try container.encodeIfPresent(shippedFromCountryCode, forKey: .shippedFromCountryCode)
    }



}

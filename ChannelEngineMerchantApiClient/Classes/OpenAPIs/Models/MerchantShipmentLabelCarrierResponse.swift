//
// MerchantShipmentLabelCarrierResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct MerchantShipmentLabelCarrierResponse: Codable, Hashable {

    /** The channel&#39;s name for the shipping label carrier */
    public var name: String?
    /** The channel&#39;s code for the shipping label carrier */
    public var code: String?
    /** Optional. Any restrictions on this carriers, e.g. weight and/or dimensions */
    public var restrictions: String?
    /** Optional. Price for this shipping label */
    public var price: Double?
    public var recommendation: ChannelCarrierRecommendationApi?
    public var collectionMethod: ChannelCarrierCollectionMethodApi?
    /** Optional. When to handover the package to the carrier  It is in the ISO format including the timezone offset.  E.g. 2020-10-03T18:00:00+02:00  which is 3rd Oct 2020, at 18:00 PM in Amsterdam (Summer Time aka CEST: UTC +2:00 ) */
    public var handoverDateTime: Date?

    public init(name: String? = nil, code: String? = nil, restrictions: String? = nil, price: Double? = nil, recommendation: ChannelCarrierRecommendationApi? = nil, collectionMethod: ChannelCarrierCollectionMethodApi? = nil, handoverDateTime: Date? = nil) {
        self.name = name
        self.code = code
        self.restrictions = restrictions
        self.price = price
        self.recommendation = recommendation
        self.collectionMethod = collectionMethod
        self.handoverDateTime = handoverDateTime
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case name = "Name"
        case code = "Code"
        case restrictions = "Restrictions"
        case price = "Price"
        case recommendation = "Recommendation"
        case collectionMethod = "CollectionMethod"
        case handoverDateTime = "HandoverDateTime"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(restrictions, forKey: .restrictions)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(recommendation, forKey: .recommendation)
        try container.encodeIfPresent(collectionMethod, forKey: .collectionMethod)
        try container.encodeIfPresent(handoverDateTime, forKey: .handoverDateTime)
    }



}

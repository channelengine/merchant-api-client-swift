//
// MerchantStockLocationAddressRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MerchantStockLocationAddressRequest: Codable, Hashable {

    public var countryIso: String
    public var streetName: String?
    public var zipCode: String?
    public var houseNr: String?
    public var houseNrAddition: String?
    public var city: String?
    public var region: String?

    public init(countryIso: String, streetName: String? = nil, zipCode: String? = nil, houseNr: String? = nil, houseNrAddition: String? = nil, city: String? = nil, region: String? = nil) {
        self.countryIso = countryIso
        self.streetName = streetName
        self.zipCode = zipCode
        self.houseNr = houseNr
        self.houseNrAddition = houseNrAddition
        self.city = city
        self.region = region
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case countryIso = "CountryIso"
        case streetName = "StreetName"
        case zipCode = "ZipCode"
        case houseNr = "HouseNr"
        case houseNrAddition = "HouseNrAddition"
        case city = "City"
        case region = "Region"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(countryIso, forKey: .countryIso)
        try container.encodeIfPresent(streetName, forKey: .streetName)
        try container.encodeIfPresent(zipCode, forKey: .zipCode)
        try container.encodeIfPresent(houseNr, forKey: .houseNr)
        try container.encodeIfPresent(houseNrAddition, forKey: .houseNrAddition)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(region, forKey: .region)
    }
}


//
// MerchantProductResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct MerchantProductResponse: Codable, Hashable {

    /** Is the product active for the Merchant?. */
    public var isActive: Bool?
    public var extraData: [MerchantProductExtraDataItemResponse]?
    /** The name of the product. */
    public var name: String?
    /** A description of the product. Can contain these HTML tags:  div, span, pre, p, br, hr, hgroup, h1, h2, h3, h4, h5, h6, ul, ol, li, dl, dt, dd, strong, em, b, i, u, img, a, abbr, address, blockquote, area, audio, video, caption, table, tbody, td, tfoot, th, thead, tr. */
    public var description: String?
    /** The brand of the product. */
    public var brand: String?
    /** Optional. The size of the product (variant). E.g. fashion size (S-XL, 46-56, etc), width of the watch, etc.. */
    public var size: String?
    /** Optional. The color of the product (variant). */
    public var color: String?
    /** The EAN of GTIN of the product. */
    public var ean: String?
    /** The unique product reference used by the manufacturer/vendor of the product. */
    public var manufacturerProductNumber: String?
    /** A unique identifier of the product. (sku). */
    public var merchantProductNo: String
    /** The number of items in stock. */
    public var stock: Int?
    /** Price, including VAT. */
    public var price: Double?
    /** Manufacturer&#39;s suggested retail price. */
    public var MSRP: Double?
    /** Optional. The purchase price of the product. Useful for repricing. */
    public var purchasePrice: Double?
    public var vatRateType: VatRateType?
    /** Shipping cost of the product. */
    public var shippingCost: Double?
    /** A textual representation of the shippingtime.  For example, in Dutch: &#39;Op werkdagen voor 22:00 uur besteld, morgen in huis&#39;. */
    public var shippingTime: String?
    /** A URL pointing to the merchant&#39;s webpage  which displays this product. */
    public var url: String?
    /** A URL at which an image of this product  can be found. */
    public var imageUrl: String?
    /** Url to an additional image of product (1). */
    public var extraImageUrl1: String?
    /** Url to an additional image of product (2). */
    public var extraImageUrl2: String?
    /** Url to an additional image of product (3). */
    public var extraImageUrl3: String?
    /** Url to an additional image of product (4). */
    public var extraImageUrl4: String?
    /** Url to an additional image of product (5). */
    public var extraImageUrl5: String?
    /** Url to an additional image of product (6). */
    public var extraImageUrl6: String?
    /** Url to an additional image of product (7). */
    public var extraImageUrl7: String?
    /** Url to an additional image of product (8). */
    public var extraImageUrl8: String?
    /** Url to an additional image of product (9). */
    public var extraImageUrl9: String?
    /** The category to which this product belongs.  Please supply this field in the following format:  &#39;maincategory &gt; category &gt; subcategory&#39;  For example:  &#39;vehicles &gt; bikes &gt; mountainbike&#39;. */
    public var categoryTrail: String?

    public init(isActive: Bool? = nil, extraData: [MerchantProductExtraDataItemResponse]? = nil, name: String? = nil, description: String? = nil, brand: String? = nil, size: String? = nil, color: String? = nil, ean: String? = nil, manufacturerProductNumber: String? = nil, merchantProductNo: String, stock: Int? = nil, price: Double? = nil, MSRP: Double? = nil, purchasePrice: Double? = nil, vatRateType: VatRateType? = nil, shippingCost: Double? = nil, shippingTime: String? = nil, url: String? = nil, imageUrl: String? = nil, extraImageUrl1: String? = nil, extraImageUrl2: String? = nil, extraImageUrl3: String? = nil, extraImageUrl4: String? = nil, extraImageUrl5: String? = nil, extraImageUrl6: String? = nil, extraImageUrl7: String? = nil, extraImageUrl8: String? = nil, extraImageUrl9: String? = nil, categoryTrail: String? = nil) {
        self.isActive = isActive
        self.extraData = extraData
        self.name = name
        self.description = description
        self.brand = brand
        self.size = size
        self.color = color
        self.ean = ean
        self.manufacturerProductNumber = manufacturerProductNumber
        self.merchantProductNo = merchantProductNo
        self.stock = stock
        self.price = price
        self.MSRP = MSRP
        self.purchasePrice = purchasePrice
        self.vatRateType = vatRateType
        self.shippingCost = shippingCost
        self.shippingTime = shippingTime
        self.url = url
        self.imageUrl = imageUrl
        self.extraImageUrl1 = extraImageUrl1
        self.extraImageUrl2 = extraImageUrl2
        self.extraImageUrl3 = extraImageUrl3
        self.extraImageUrl4 = extraImageUrl4
        self.extraImageUrl5 = extraImageUrl5
        self.extraImageUrl6 = extraImageUrl6
        self.extraImageUrl7 = extraImageUrl7
        self.extraImageUrl8 = extraImageUrl8
        self.extraImageUrl9 = extraImageUrl9
        self.categoryTrail = categoryTrail
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case isActive = "IsActive"
        case extraData = "ExtraData"
        case name = "Name"
        case description = "Description"
        case brand = "Brand"
        case size = "Size"
        case color = "Color"
        case ean = "Ean"
        case manufacturerProductNumber = "ManufacturerProductNumber"
        case merchantProductNo = "MerchantProductNo"
        case stock = "Stock"
        case price = "Price"
        case MSRP
        case purchasePrice = "PurchasePrice"
        case vatRateType = "VatRateType"
        case shippingCost = "ShippingCost"
        case shippingTime = "ShippingTime"
        case url = "Url"
        case imageUrl = "ImageUrl"
        case extraImageUrl1 = "ExtraImageUrl1"
        case extraImageUrl2 = "ExtraImageUrl2"
        case extraImageUrl3 = "ExtraImageUrl3"
        case extraImageUrl4 = "ExtraImageUrl4"
        case extraImageUrl5 = "ExtraImageUrl5"
        case extraImageUrl6 = "ExtraImageUrl6"
        case extraImageUrl7 = "ExtraImageUrl7"
        case extraImageUrl8 = "ExtraImageUrl8"
        case extraImageUrl9 = "ExtraImageUrl9"
        case categoryTrail = "CategoryTrail"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(isActive, forKey: .isActive)
        try container.encodeIfPresent(extraData, forKey: .extraData)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(brand, forKey: .brand)
        try container.encodeIfPresent(size, forKey: .size)
        try container.encodeIfPresent(color, forKey: .color)
        try container.encodeIfPresent(ean, forKey: .ean)
        try container.encodeIfPresent(manufacturerProductNumber, forKey: .manufacturerProductNumber)
        try container.encode(merchantProductNo, forKey: .merchantProductNo)
        try container.encodeIfPresent(stock, forKey: .stock)
        try container.encodeIfPresent(price, forKey: .price)
        try container.encodeIfPresent(MSRP, forKey: .MSRP)
        try container.encodeIfPresent(purchasePrice, forKey: .purchasePrice)
        try container.encodeIfPresent(vatRateType, forKey: .vatRateType)
        try container.encodeIfPresent(shippingCost, forKey: .shippingCost)
        try container.encodeIfPresent(shippingTime, forKey: .shippingTime)
        try container.encodeIfPresent(url, forKey: .url)
        try container.encodeIfPresent(imageUrl, forKey: .imageUrl)
        try container.encodeIfPresent(extraImageUrl1, forKey: .extraImageUrl1)
        try container.encodeIfPresent(extraImageUrl2, forKey: .extraImageUrl2)
        try container.encodeIfPresent(extraImageUrl3, forKey: .extraImageUrl3)
        try container.encodeIfPresent(extraImageUrl4, forKey: .extraImageUrl4)
        try container.encodeIfPresent(extraImageUrl5, forKey: .extraImageUrl5)
        try container.encodeIfPresent(extraImageUrl6, forKey: .extraImageUrl6)
        try container.encodeIfPresent(extraImageUrl7, forKey: .extraImageUrl7)
        try container.encodeIfPresent(extraImageUrl8, forKey: .extraImageUrl8)
        try container.encodeIfPresent(extraImageUrl9, forKey: .extraImageUrl9)
        try container.encodeIfPresent(categoryTrail, forKey: .categoryTrail)
    }



}

//
// MerchantOrderLineResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct MerchantOrderLineResponse: Codable, Hashable {

    public var status: OrderStatusView?
    /** Is the order fulfilled by the marketplace (amazon: FBA, bol: LVB, etc.)?. */
    public var isFulfillmentByMarketplace: Bool?
    /** Either the GTIN (EAN, ISBN, UPC etc) provided by the channel, or the the GTIN belonging to the MerchantProductNo in ChannelEngine. */
    public var gtin: String?
    /** The product description (or title) provided by the channel. */
    public var description: String?
    public var stockLocation: MerchantStockLocationResponse?
    /** The total amount of VAT charged over the value of a single unit of the ordered product  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering). */
    public var unitVat: Double?
    /** The total value of the order line (quantity * unit price) including VAT  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering). */
    public var lineTotalInclVat: Double?
    /** The total amount of VAT charged over the total value of the order line (quantity * unit price)  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering). */
    public var lineVat: Double?
    /** The value of a single unit of the ordered product including VAT  (in the currency in which the order was paid for, see CurrencyCode). */
    public var originalUnitPriceInclVat: Double?
    /** The total amount of VAT charged over the value of a single unit of the ordered product  (in the currency in which the order was paid for, see CurrencyCode). */
    public var originalUnitVat: Double?
    /** The total value of the order line (quantity * unit price) including VAT  (in the currency in which the order was paid for, see CurrencyCode). */
    public var originalLineTotalInclVat: Double?
    /** The total amount of VAT charged over the total value of the order line (quantity * unit price)  (in the currency in which the order was paid for, see CurrencyCode). */
    public var originalLineVat: Double?
    /** A percentage fee that is charged by the Channel for this orderline.  This fee rate is based on the currency of client  This field is optional, send 0 if not applicable. */
    public var originalFeeFixed: Double?
    /** If the product is ordered part of a bundle, this field contains the MerchantProductNo of  the product bundle. */
    public var bundleProductMerchantProductNo: String?
    /** State assigned code identifying the jurisdiction. */
    public var jurisCode: String?
    /** Name of a tax jurisdiction. */
    public var jurisName: String?
    /** VAT rate of the orderline. */
    public var vatRate: Double?
    public var extraData: [MerchantOrderLineExtraDataResponse]?
    /** The unique product reference used by the channel. */
    public var channelProductNo: String
    /** The unique product reference used by the merchant. */
    public var merchantProductNo: String?
    /** The number of items of the product. */
    public var quantity: Int
    /** The number of items for which cancellation was requested by the customer.  Some channels allow a customer to cancel an order until it has been shipped.  When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation.  Use this field to check whether it is still possible to cancel the order. If this is the case, submit a cancellation to ChannelEngine. */
    public var cancellationRequestedQuantity: Int?
    /** The value of a single unit of the ordered product including VAT  (in the shop&#39;s base currency calculated using the exchange rate at the time of ordering). */
    public var unitPriceInclVat: Double
    /** A fixed fee that is charged by the Channel for this orderline.  This fee rate is based on the currency of the Channel  This field is optional, send 0 if not applicable. */
    public var feeFixed: Double?
    /** A percentage fee that is charged by the Channel for this orderline.  This field is optional, send 0 if not applicable. */
    public var feeRate: Double?
    public var condition: Condition?
    /** Expected delivery date from channels, empty if channels not support this value */
    public var expectedDeliveryDate: Date?

    public init(status: OrderStatusView? = nil, isFulfillmentByMarketplace: Bool? = nil, gtin: String? = nil, description: String? = nil, stockLocation: MerchantStockLocationResponse? = nil, unitVat: Double? = nil, lineTotalInclVat: Double? = nil, lineVat: Double? = nil, originalUnitPriceInclVat: Double? = nil, originalUnitVat: Double? = nil, originalLineTotalInclVat: Double? = nil, originalLineVat: Double? = nil, originalFeeFixed: Double? = nil, bundleProductMerchantProductNo: String? = nil, jurisCode: String? = nil, jurisName: String? = nil, vatRate: Double? = nil, extraData: [MerchantOrderLineExtraDataResponse]? = nil, channelProductNo: String, merchantProductNo: String? = nil, quantity: Int, cancellationRequestedQuantity: Int? = nil, unitPriceInclVat: Double, feeFixed: Double? = nil, feeRate: Double? = nil, condition: Condition? = nil, expectedDeliveryDate: Date? = nil) {
        self.status = status
        self.isFulfillmentByMarketplace = isFulfillmentByMarketplace
        self.gtin = gtin
        self.description = description
        self.stockLocation = stockLocation
        self.unitVat = unitVat
        self.lineTotalInclVat = lineTotalInclVat
        self.lineVat = lineVat
        self.originalUnitPriceInclVat = originalUnitPriceInclVat
        self.originalUnitVat = originalUnitVat
        self.originalLineTotalInclVat = originalLineTotalInclVat
        self.originalLineVat = originalLineVat
        self.originalFeeFixed = originalFeeFixed
        self.bundleProductMerchantProductNo = bundleProductMerchantProductNo
        self.jurisCode = jurisCode
        self.jurisName = jurisName
        self.vatRate = vatRate
        self.extraData = extraData
        self.channelProductNo = channelProductNo
        self.merchantProductNo = merchantProductNo
        self.quantity = quantity
        self.cancellationRequestedQuantity = cancellationRequestedQuantity
        self.unitPriceInclVat = unitPriceInclVat
        self.feeFixed = feeFixed
        self.feeRate = feeRate
        self.condition = condition
        self.expectedDeliveryDate = expectedDeliveryDate
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case status = "Status"
        case isFulfillmentByMarketplace = "IsFulfillmentByMarketplace"
        case gtin = "Gtin"
        case description = "Description"
        case stockLocation = "StockLocation"
        case unitVat = "UnitVat"
        case lineTotalInclVat = "LineTotalInclVat"
        case lineVat = "LineVat"
        case originalUnitPriceInclVat = "OriginalUnitPriceInclVat"
        case originalUnitVat = "OriginalUnitVat"
        case originalLineTotalInclVat = "OriginalLineTotalInclVat"
        case originalLineVat = "OriginalLineVat"
        case originalFeeFixed = "OriginalFeeFixed"
        case bundleProductMerchantProductNo = "BundleProductMerchantProductNo"
        case jurisCode = "JurisCode"
        case jurisName = "JurisName"
        case vatRate = "VatRate"
        case extraData = "ExtraData"
        case channelProductNo = "ChannelProductNo"
        case merchantProductNo = "MerchantProductNo"
        case quantity = "Quantity"
        case cancellationRequestedQuantity = "CancellationRequestedQuantity"
        case unitPriceInclVat = "UnitPriceInclVat"
        case feeFixed = "FeeFixed"
        case feeRate = "FeeRate"
        case condition = "Condition"
        case expectedDeliveryDate = "ExpectedDeliveryDate"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(isFulfillmentByMarketplace, forKey: .isFulfillmentByMarketplace)
        try container.encodeIfPresent(gtin, forKey: .gtin)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(stockLocation, forKey: .stockLocation)
        try container.encodeIfPresent(unitVat, forKey: .unitVat)
        try container.encodeIfPresent(lineTotalInclVat, forKey: .lineTotalInclVat)
        try container.encodeIfPresent(lineVat, forKey: .lineVat)
        try container.encodeIfPresent(originalUnitPriceInclVat, forKey: .originalUnitPriceInclVat)
        try container.encodeIfPresent(originalUnitVat, forKey: .originalUnitVat)
        try container.encodeIfPresent(originalLineTotalInclVat, forKey: .originalLineTotalInclVat)
        try container.encodeIfPresent(originalLineVat, forKey: .originalLineVat)
        try container.encodeIfPresent(originalFeeFixed, forKey: .originalFeeFixed)
        try container.encodeIfPresent(bundleProductMerchantProductNo, forKey: .bundleProductMerchantProductNo)
        try container.encodeIfPresent(jurisCode, forKey: .jurisCode)
        try container.encodeIfPresent(jurisName, forKey: .jurisName)
        try container.encodeIfPresent(vatRate, forKey: .vatRate)
        try container.encodeIfPresent(extraData, forKey: .extraData)
        try container.encode(channelProductNo, forKey: .channelProductNo)
        try container.encodeIfPresent(merchantProductNo, forKey: .merchantProductNo)
        try container.encode(quantity, forKey: .quantity)
        try container.encodeIfPresent(cancellationRequestedQuantity, forKey: .cancellationRequestedQuantity)
        try container.encode(unitPriceInclVat, forKey: .unitPriceInclVat)
        try container.encodeIfPresent(feeFixed, forKey: .feeFixed)
        try container.encodeIfPresent(feeRate, forKey: .feeRate)
        try container.encodeIfPresent(condition, forKey: .condition)
        try container.encodeIfPresent(expectedDeliveryDate, forKey: .expectedDeliveryDate)
    }



}

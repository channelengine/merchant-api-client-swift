//
// MerchantShipmentTrackingRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import AnyCodable

public struct MerchantShipmentTrackingRequest: Codable, Hashable {

    /** Shipment method (carrier). */
    public var method: String
    /** The unique shipping reference used by the Shipping carrier (track &amp; trace number). */
    public var trackTraceNo: String
    /** The unique return shipping reference that may be used by the Shipping carrier (track &amp; trace number) if the shipment is returned. */
    public var returnTrackTraceNo: String?
    /** A link to a page of the carrier where the customer can track the shipping of her package. */
    public var trackTraceUrl: String?
    /** The code of the country from where the package is being shipped. */
    public var shippedFromCountryCode: String?

    public init(method: String, trackTraceNo: String, returnTrackTraceNo: String? = nil, trackTraceUrl: String? = nil, shippedFromCountryCode: String? = nil) {
        self.method = method
        self.trackTraceNo = trackTraceNo
        self.returnTrackTraceNo = returnTrackTraceNo
        self.trackTraceUrl = trackTraceUrl
        self.shippedFromCountryCode = shippedFromCountryCode
    }
    public enum CodingKeys: String, CodingKey, CaseIterable {
        case method = "Method"
        case trackTraceNo = "TrackTraceNo"
        case returnTrackTraceNo = "ReturnTrackTraceNo"
        case trackTraceUrl = "TrackTraceUrl"
        case shippedFromCountryCode = "ShippedFromCountryCode"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(method, forKey: .method)
        try container.encode(trackTraceNo, forKey: .trackTraceNo)
        try container.encodeIfPresent(returnTrackTraceNo, forKey: .returnTrackTraceNo)
        try container.encodeIfPresent(trackTraceUrl, forKey: .trackTraceUrl)
        try container.encodeIfPresent(shippedFromCountryCode, forKey: .shippedFromCountryCode)
    }



}

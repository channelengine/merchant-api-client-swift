//
// MerchantCancellationResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct MerchantCancellationResponse: Codable, Hashable {

    /** The unique cancellation reference used by the Merchant (sku). */
    public var merchantCancellationNo: String
    /** The unique order reference used by the Merchant. */
    public var merchantOrderNo: String
    /** The unique order reference used by the Channel. */
    public var channelOrderNo: String?
    public var lines: [MerchantCancellationLineResponse]
    /** The date at which the cancellation was created in ChannelEngine. */
    public var createdAt: Date?
    /** Reason for cancellation (text). */
    public var reason: String?
    public var reasonCode: MancoReason?

    public init(merchantCancellationNo: String, merchantOrderNo: String, channelOrderNo: String? = nil, lines: [MerchantCancellationLineResponse], createdAt: Date? = nil, reason: String? = nil, reasonCode: MancoReason? = nil) {
        self.merchantCancellationNo = merchantCancellationNo
        self.merchantOrderNo = merchantOrderNo
        self.channelOrderNo = channelOrderNo
        self.lines = lines
        self.createdAt = createdAt
        self.reason = reason
        self.reasonCode = reasonCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case merchantCancellationNo = "MerchantCancellationNo"
        case merchantOrderNo = "MerchantOrderNo"
        case channelOrderNo = "ChannelOrderNo"
        case lines = "Lines"
        case createdAt = "CreatedAt"
        case reason = "Reason"
        case reasonCode = "ReasonCode"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(merchantCancellationNo, forKey: .merchantCancellationNo)
        try container.encode(merchantOrderNo, forKey: .merchantOrderNo)
        try container.encodeIfPresent(channelOrderNo, forKey: .channelOrderNo)
        try container.encode(lines, forKey: .lines)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(reason, forKey: .reason)
        try container.encodeIfPresent(reasonCode, forKey: .reasonCode)
    }
}


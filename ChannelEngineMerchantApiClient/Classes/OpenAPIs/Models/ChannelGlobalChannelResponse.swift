//
// ChannelGlobalChannelResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ChannelGlobalChannelResponse: Codable, Hashable {

    /** The country code of the Global Channel. */
    public var countryCode: String?
    /** The ID of the Global Channel. */
    public var globalChannelId: Int?
    /** The status of the instances. */
    public var channels: [ChannelChannelResponse]?
    /** The language code of the Global Channel. */
    public var languageCode: String?
    /** The name of the Global Channel. */
    public var globalChannelName: String?

    public init(countryCode: String? = nil, globalChannelId: Int? = nil, channels: [ChannelChannelResponse]? = nil, languageCode: String? = nil, globalChannelName: String? = nil) {
        self.countryCode = countryCode
        self.globalChannelId = globalChannelId
        self.channels = channels
        self.languageCode = languageCode
        self.globalChannelName = globalChannelName
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case countryCode = "CountryCode"
        case globalChannelId = "GlobalChannelId"
        case channels = "Channels"
        case languageCode = "LanguageCode"
        case globalChannelName = "GlobalChannelName"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(countryCode, forKey: .countryCode)
        try container.encodeIfPresent(globalChannelId, forKey: .globalChannelId)
        try container.encodeIfPresent(channels, forKey: .channels)
        try container.encodeIfPresent(languageCode, forKey: .languageCode)
        try container.encodeIfPresent(globalChannelName, forKey: .globalChannelName)
    }
}


//
// ShipmentAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation

open class ShipmentAPI {
    /**
     Create Shipment.
     
     - parameter merchantShipmentRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func shipmentCreate(merchantShipmentRequest: MerchantShipmentRequest? = nil, apiResponseQueue: DispatchQueue = ChannelEngineMerchantApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApiResponse?, _ error: Error?) -> Void)) {
        shipmentCreateWithRequestBuilder(merchantShipmentRequest: merchantShipmentRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Shipment.
     - POST /v2/shipments
     - Mark (part of) an order as shipped.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apiKey
     - parameter merchantShipmentRequest: (body)  (optional)
     - returns: RequestBuilder<ApiResponse> 
     */
    open class func shipmentCreateWithRequestBuilder(merchantShipmentRequest: MerchantShipmentRequest? = nil) -> RequestBuilder<ApiResponse> {
        let path = "/v2/shipments"
        let URLString = ChannelEngineMerchantApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: merchantShipmentRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponse>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Create shipment for channel provided shipping labels
     
     - parameter merchantChannelLabelShipmentRequest: (body) The shipment to create (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func shipmentCreateForChannelMethod(merchantChannelLabelShipmentRequest: MerchantChannelLabelShipmentRequest? = nil, apiResponseQueue: DispatchQueue = ChannelEngineMerchantApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApiResponse?, _ error: Error?) -> Void)) {
        shipmentCreateForChannelMethodWithRequestBuilder(merchantChannelLabelShipmentRequest: merchantChannelLabelShipmentRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create shipment for channel provided shipping labels
     - POST /v2/shipments/channelmethod
     - Create a shipment, which will request a shipping label from the channel
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apiKey
     - parameter merchantChannelLabelShipmentRequest: (body) The shipment to create (optional)
     - returns: RequestBuilder<ApiResponse> 
     */
    open class func shipmentCreateForChannelMethodWithRequestBuilder(merchantChannelLabelShipmentRequest: MerchantChannelLabelShipmentRequest? = nil) -> RequestBuilder<ApiResponse> {
        let path = "/v2/shipments/channelmethod"
        let URLString = ChannelEngineMerchantApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: merchantChannelLabelShipmentRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponse>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Get carriers for channel provided shipping labels
     
     - parameter merchantOrderNo: (path) The merchant&#39;s order reference. 
     - parameter merchantShipmentLabelCarrierRequest: (body) The parcel information (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func shipmentGetShipmentLabelCarriers(merchantOrderNo: String, merchantShipmentLabelCarrierRequest: MerchantShipmentLabelCarrierRequest? = nil, apiResponseQueue: DispatchQueue = ChannelEngineMerchantApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: CollectionOfMerchantShipmentLabelCarrierResponse?, _ error: Error?) -> Void)) {
        shipmentGetShipmentLabelCarriersWithRequestBuilder(merchantOrderNo: merchantOrderNo, merchantShipmentLabelCarrierRequest: merchantShipmentLabelCarrierRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get carriers for channel provided shipping labels
     - POST /v2/carriers/{merchantOrderNo}
     - Get the carriers for buying a shipping label from the channel
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apiKey
     - parameter merchantOrderNo: (path) The merchant&#39;s order reference. 
     - parameter merchantShipmentLabelCarrierRequest: (body) The parcel information (optional)
     - returns: RequestBuilder<CollectionOfMerchantShipmentLabelCarrierResponse> 
     */
    open class func shipmentGetShipmentLabelCarriersWithRequestBuilder(merchantOrderNo: String, merchantShipmentLabelCarrierRequest: MerchantShipmentLabelCarrierRequest? = nil) -> RequestBuilder<CollectionOfMerchantShipmentLabelCarrierResponse> {
        var path = "/v2/carriers/{merchantOrderNo}"
        let merchantOrderNoPreEscape = "\(APIHelper.mapValueToPathItem(merchantOrderNo))"
        let merchantOrderNoPostEscape = merchantOrderNoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{merchantOrderNo}", with: merchantOrderNoPostEscape, options: .literal, range: nil)
        let URLString = ChannelEngineMerchantApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: merchantShipmentLabelCarrierRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<CollectionOfMerchantShipmentLabelCarrierResponse>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "POST", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Download shipping label.
     
     - parameter merchantShipmentNo: (path) The unique shipment reference as used by the merchant. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func shipmentShippingLabel(merchantShipmentNo: String, apiResponseQueue: DispatchQueue = ChannelEngineMerchantApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        shipmentShippingLabelWithRequestBuilder(merchantShipmentNo: merchantShipmentNo).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Download shipping label.
     - GET /v2/orders/{merchantShipmentNo}/shippinglabel
     - Downloads the shipping label for the shipment. There may pass some time between creating the shipment<br />and the availability of the label. So '404 Not Found' might incidate it is not available yet.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apiKey
     - parameter merchantShipmentNo: (path) The unique shipment reference as used by the merchant. 
     - returns: RequestBuilder<URL> 
     */
    open class func shipmentShippingLabelWithRequestBuilder(merchantShipmentNo: String) -> RequestBuilder<URL> {
        var path = "/v2/orders/{merchantShipmentNo}/shippinglabel"
        let merchantShipmentNoPreEscape = "\(APIHelper.mapValueToPathItem(merchantShipmentNo))"
        let merchantShipmentNoPostEscape = merchantShipmentNoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{merchantShipmentNo}", with: merchantShipmentNoPostEscape, options: .literal, range: nil)
        let URLString = ChannelEngineMerchantApiClientAPI.basePath + path
        let parameters: [String: Any]? = nil

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<URL>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

    /**
     Update Shipment.
     
     - parameter merchantShipmentNo: (path) The merchant&#39;s shipment reference. 
     - parameter merchantShipmentTrackingRequest: (body) The updated tracking information. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func shipmentUpdate(merchantShipmentNo: String, merchantShipmentTrackingRequest: MerchantShipmentTrackingRequest? = nil, apiResponseQueue: DispatchQueue = ChannelEngineMerchantApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApiResponse?, _ error: Error?) -> Void)) {
        shipmentUpdateWithRequestBuilder(merchantShipmentNo: merchantShipmentNo, merchantShipmentTrackingRequest: merchantShipmentTrackingRequest).execute(apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Shipment.
     - PUT /v2/shipments/{merchantShipmentNo}
     - Update an existing shipment with tracking information.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apiKey
     - parameter merchantShipmentNo: (path) The merchant&#39;s shipment reference. 
     - parameter merchantShipmentTrackingRequest: (body) The updated tracking information. (optional)
     - returns: RequestBuilder<ApiResponse> 
     */
    open class func shipmentUpdateWithRequestBuilder(merchantShipmentNo: String, merchantShipmentTrackingRequest: MerchantShipmentTrackingRequest? = nil) -> RequestBuilder<ApiResponse> {
        var path = "/v2/shipments/{merchantShipmentNo}"
        let merchantShipmentNoPreEscape = "\(APIHelper.mapValueToPathItem(merchantShipmentNo))"
        let merchantShipmentNoPostEscape = merchantShipmentNoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{merchantShipmentNo}", with: merchantShipmentNoPostEscape, options: .literal, range: nil)
        let URLString = ChannelEngineMerchantApiClientAPI.basePath + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: merchantShipmentTrackingRequest)

        let urlComponents = URLComponents(string: URLString)

        let nillableHeaders: [String: Any?] = [
            :
        ]

        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<ApiResponse>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "PUT", URLString: (urlComponents?.string ?? URLString), parameters: parameters, headers: headerParameters)
    }

}

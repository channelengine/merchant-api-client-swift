//
// NotificationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class NotificationAPI {

    /**
     Get Notifications.
     
     - parameter fromDate: (query) Filter on the notification date, starting from this date. This date is inclusive. (optional)
     - parameter toDate: (query) Filter on the notification date, until this date. This date is exclusive. (optional)
     - parameter types: (query) Notification type(s) to filter on. (optional)
     - parameter merchantOrderNos: (query) Filter on unique order reference used by the merchant. (optional)
     - parameter channelOrderNos: (query) Filter on unique order reference used by the channel. (optional)
     - parameter merchantReturnNos: (query) Filter on unique return reference used by the merchant. (optional)
     - parameter channelReturnNos: (query) Filter on unique return reference used by the channel. (optional)
     - parameter merchantShipmentNos: (query) Filter on unique shipment reference used by the merchant. (optional)
     - parameter page: (query) The page to filter on. Starts at 1. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func notificationIndex(fromDate: Date? = nil, toDate: Date? = nil, types: [NotificationType]? = nil, merchantOrderNos: [String]? = nil, channelOrderNos: [String]? = nil, merchantReturnNos: [String]? = nil, channelReturnNos: [String]? = nil, merchantShipmentNos: [String]? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = ChannelEngineMerchantApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: CollectionOfMerchantNotificationResponse?, _ error: Error?) -> Void)) {
        notificationIndexWithRequestBuilder(fromDate: fromDate, toDate: toDate, types: types, merchantOrderNos: merchantOrderNos, channelOrderNos: channelOrderNos, merchantReturnNos: merchantReturnNos, channelReturnNos: channelReturnNos, merchantShipmentNos: merchantShipmentNos, page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Notifications.
     - GET /v2/notifications
     - Gets all notifications based on filter.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apiKey
     - parameter fromDate: (query) Filter on the notification date, starting from this date. This date is inclusive. (optional)
     - parameter toDate: (query) Filter on the notification date, until this date. This date is exclusive. (optional)
     - parameter types: (query) Notification type(s) to filter on. (optional)
     - parameter merchantOrderNos: (query) Filter on unique order reference used by the merchant. (optional)
     - parameter channelOrderNos: (query) Filter on unique order reference used by the channel. (optional)
     - parameter merchantReturnNos: (query) Filter on unique return reference used by the merchant. (optional)
     - parameter channelReturnNos: (query) Filter on unique return reference used by the channel. (optional)
     - parameter merchantShipmentNos: (query) Filter on unique shipment reference used by the merchant. (optional)
     - parameter page: (query) The page to filter on. Starts at 1. (optional)
     - returns: RequestBuilder<CollectionOfMerchantNotificationResponse> 
     */
    open class func notificationIndexWithRequestBuilder(fromDate: Date? = nil, toDate: Date? = nil, types: [NotificationType]? = nil, merchantOrderNos: [String]? = nil, channelOrderNos: [String]? = nil, merchantReturnNos: [String]? = nil, channelReturnNos: [String]? = nil, merchantShipmentNos: [String]? = nil, page: Int? = nil) -> RequestBuilder<CollectionOfMerchantNotificationResponse> {
        let localVariablePath = "/v2/notifications"
        let localVariableURLString = ChannelEngineMerchantApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "fromDate": fromDate?.encodeToJSON(),
            "toDate": toDate?.encodeToJSON(),
            "types": types?.encodeToJSON(),
            "merchantOrderNos": merchantOrderNos?.encodeToJSON(),
            "channelOrderNos": channelOrderNos?.encodeToJSON(),
            "merchantReturnNos": merchantReturnNos?.encodeToJSON(),
            "channelReturnNos": channelReturnNos?.encodeToJSON(),
            "merchantShipmentNos": merchantShipmentNos?.encodeToJSON(),
            "page": page?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CollectionOfMerchantNotificationResponse>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}

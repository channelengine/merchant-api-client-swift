//
// OrderAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class OrderAPI {

    /**
     Acknowledge Order.
     
     - parameter merchantOrderAcknowledgementRequest: (body) Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orderAcknowledge(merchantOrderAcknowledgementRequest: MerchantOrderAcknowledgementRequest? = nil, apiResponseQueue: DispatchQueue = ChannelEngineMerchantApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApiResponse?, _ error: Error?) -> Void)) {
        orderAcknowledgeWithRequestBuilder(merchantOrderAcknowledgementRequest: merchantOrderAcknowledgementRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Acknowledge Order.
     - POST /v2/orders/acknowledge
     - Acknowledge an order. By acknowledging the order the merchant can confirm that<br />the order has been imported. When acknowledging an order the merchant has to supply<br />references that uniquely identify the order and the order lines. These references<br />will be used in the other API calls.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apiKey
     - parameter merchantOrderAcknowledgementRequest: (body) Relations between the id&#39;s returned by ChannelEngine and the references which the merchant uses. (optional)
     - returns: RequestBuilder<ApiResponse> 
     */
    open class func orderAcknowledgeWithRequestBuilder(merchantOrderAcknowledgementRequest: MerchantOrderAcknowledgementRequest? = nil) -> RequestBuilder<ApiResponse> {
        let localVariablePath = "/v2/orders/acknowledge"
        let localVariableURLString = ChannelEngineMerchantApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: merchantOrderAcknowledgementRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiResponse>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Orders By Filter.
     
     - parameter statuses: (query) Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)
     - parameter emailAddresses: (query) Client emailaddresses to filter on. (optional)
     - parameter merchantOrderNos: (query) Filter on unique order reference used by the merchant. (optional)
     - parameter channelOrderNos: (query) Filter on unique order reference used by the channel. (optional)
     - parameter fromDate: (query) Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     - parameter toDate: (query) Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     - parameter fromCreatedAtDate: (query) Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     - parameter toCreatedAtDate: (query) Filter on the created at date in ChannelEngine, until this date. This date is exclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     - parameter excludeMarketplaceFulfilledOrdersAndLines: (query) Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)
     - parameter fulfillmentType: (query) Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)
     - parameter onlyWithCancellationRequests: (query) Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)
     - parameter channelIds: (query) Filter orders on channel(s). (optional)
     - parameter stockLocationIds: (query) Filter on stock locations (optional)
     - parameter isAcknowledged: (query) Filter on acknowledged value (optional)
     - parameter fromUpdatedAtDate: (query) Filter on the order update date, starting from this date. This date is inclusive. (optional)
     - parameter toUpdatedAtDate: (query) Filter on the order update date, unitl this date. This date is exclusive. (optional)
     - parameter fromAcknowledgedDate: (query) Filter on the order acknowledged date, starting from this date. This date is inclusive. (optional)
     - parameter toAcknowledgedDate: (query) Filter on the order acknowledged date, unitl this date. This date is exclusive. (optional)
     - parameter page: (query) The page to filter on. Starts at 1. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orderGetByFilter(statuses: [OrderStatusView]? = nil, emailAddresses: [String]? = nil, merchantOrderNos: [String]? = nil, channelOrderNos: [String]? = nil, fromDate: Date? = nil, toDate: Date? = nil, fromCreatedAtDate: Date? = nil, toCreatedAtDate: Date? = nil, excludeMarketplaceFulfilledOrdersAndLines: Bool? = nil, fulfillmentType: FulfillmentType? = nil, onlyWithCancellationRequests: Bool? = nil, channelIds: [Int]? = nil, stockLocationIds: [Int]? = nil, isAcknowledged: Bool? = nil, fromUpdatedAtDate: Date? = nil, toUpdatedAtDate: Date? = nil, fromAcknowledgedDate: Date? = nil, toAcknowledgedDate: Date? = nil, page: Int? = nil, apiResponseQueue: DispatchQueue = ChannelEngineMerchantApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: CollectionOfMerchantOrderResponse?, _ error: Error?) -> Void)) {
        orderGetByFilterWithRequestBuilder(statuses: statuses, emailAddresses: emailAddresses, merchantOrderNos: merchantOrderNos, channelOrderNos: channelOrderNos, fromDate: fromDate, toDate: toDate, fromCreatedAtDate: fromCreatedAtDate, toCreatedAtDate: toCreatedAtDate, excludeMarketplaceFulfilledOrdersAndLines: excludeMarketplaceFulfilledOrdersAndLines, fulfillmentType: fulfillmentType, onlyWithCancellationRequests: onlyWithCancellationRequests, channelIds: channelIds, stockLocationIds: stockLocationIds, isAcknowledged: isAcknowledged, fromUpdatedAtDate: fromUpdatedAtDate, toUpdatedAtDate: toUpdatedAtDate, fromAcknowledgedDate: fromAcknowledgedDate, toAcknowledgedDate: toAcknowledgedDate, page: page).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Orders By Filter.
     - GET /v2/orders
     - Fetch orders based on the provided OrderFilter.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apiKey
     - parameter statuses: (query) Order status(es) to filter on. AWAITING_PAYMENT orders will be excluded if it is not included in this Statuses filter. (optional)
     - parameter emailAddresses: (query) Client emailaddresses to filter on. (optional)
     - parameter merchantOrderNos: (query) Filter on unique order reference used by the merchant. (optional)
     - parameter channelOrderNos: (query) Filter on unique order reference used by the channel. (optional)
     - parameter fromDate: (query) Filter on the order date, starting from this date. This date is inclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     - parameter toDate: (query) Filter on the order date, until this date. This date is exclusive.&lt;br /&gt;The order date is based on the data we got from a channel. (optional)
     - parameter fromCreatedAtDate: (query) Filter on the created at date in ChannelEngine, starting from this date. This date is inclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     - parameter toCreatedAtDate: (query) Filter on the created at date in ChannelEngine, until this date. This date is exclusive.&lt;br /&gt;The created date is set on the date and time when the order is created. (optional)
     - parameter excludeMarketplaceFulfilledOrdersAndLines: (query) Exclude order (lines) fulfilled by the marketplace (amazon:FBA, bol:LVB, etc.) (optional)
     - parameter fulfillmentType: (query) Filter orders on fulfillment type. This will include all orders lines, even if they are partially fulfilled by the marketplace.&lt;br /&gt;To exclude orders and lines that are fulfilled by the marketplace from the response, set ExcludeMarketplaceFulfilledOrdersAndLines to true. (optional)
     - parameter onlyWithCancellationRequests: (query) Filter on orders containing cancellation requests.&lt;br /&gt;Some channels allow a customer to cancel an order until it has been shipped.&lt;br /&gt;When an order has already been acknowledged in ChannelEngine, it can only be cancelled by creating a cancellation. (optional)
     - parameter channelIds: (query) Filter orders on channel(s). (optional)
     - parameter stockLocationIds: (query) Filter on stock locations (optional)
     - parameter isAcknowledged: (query) Filter on acknowledged value (optional)
     - parameter fromUpdatedAtDate: (query) Filter on the order update date, starting from this date. This date is inclusive. (optional)
     - parameter toUpdatedAtDate: (query) Filter on the order update date, unitl this date. This date is exclusive. (optional)
     - parameter fromAcknowledgedDate: (query) Filter on the order acknowledged date, starting from this date. This date is inclusive. (optional)
     - parameter toAcknowledgedDate: (query) Filter on the order acknowledged date, unitl this date. This date is exclusive. (optional)
     - parameter page: (query) The page to filter on. Starts at 1. (optional)
     - returns: RequestBuilder<CollectionOfMerchantOrderResponse> 
     */
    open class func orderGetByFilterWithRequestBuilder(statuses: [OrderStatusView]? = nil, emailAddresses: [String]? = nil, merchantOrderNos: [String]? = nil, channelOrderNos: [String]? = nil, fromDate: Date? = nil, toDate: Date? = nil, fromCreatedAtDate: Date? = nil, toCreatedAtDate: Date? = nil, excludeMarketplaceFulfilledOrdersAndLines: Bool? = nil, fulfillmentType: FulfillmentType? = nil, onlyWithCancellationRequests: Bool? = nil, channelIds: [Int]? = nil, stockLocationIds: [Int]? = nil, isAcknowledged: Bool? = nil, fromUpdatedAtDate: Date? = nil, toUpdatedAtDate: Date? = nil, fromAcknowledgedDate: Date? = nil, toAcknowledgedDate: Date? = nil, page: Int? = nil) -> RequestBuilder<CollectionOfMerchantOrderResponse> {
        let localVariablePath = "/v2/orders"
        let localVariableURLString = ChannelEngineMerchantApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "statuses": statuses?.encodeToJSON(),
            "emailAddresses": emailAddresses?.encodeToJSON(),
            "merchantOrderNos": merchantOrderNos?.encodeToJSON(),
            "channelOrderNos": channelOrderNos?.encodeToJSON(),
            "fromDate": fromDate?.encodeToJSON(),
            "toDate": toDate?.encodeToJSON(),
            "fromCreatedAtDate": fromCreatedAtDate?.encodeToJSON(),
            "toCreatedAtDate": toCreatedAtDate?.encodeToJSON(),
            "excludeMarketplaceFulfilledOrdersAndLines": excludeMarketplaceFulfilledOrdersAndLines?.encodeToJSON(),
            "fulfillmentType": fulfillmentType?.encodeToJSON(),
            "onlyWithCancellationRequests": onlyWithCancellationRequests?.encodeToJSON(),
            "channelIds": channelIds?.encodeToJSON(),
            "stockLocationIds": stockLocationIds?.encodeToJSON(),
            "isAcknowledged": isAcknowledged?.encodeToJSON(),
            "fromUpdatedAtDate": fromUpdatedAtDate?.encodeToJSON(),
            "toUpdatedAtDate": toUpdatedAtDate?.encodeToJSON(),
            "fromAcknowledgedDate": fromAcknowledgedDate?.encodeToJSON(),
            "toAcknowledgedDate": toAcknowledgedDate?.encodeToJSON(),
            "page": page?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CollectionOfMerchantOrderResponse>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get New Orders.
     
     - parameter stockLocationId: (query) The ChannelEngine id of the stock location. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orderGetNew(stockLocationId: Int? = nil, apiResponseQueue: DispatchQueue = ChannelEngineMerchantApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: CollectionOfMerchantOrderResponse?, _ error: Error?) -> Void)) {
        orderGetNewWithRequestBuilder(stockLocationId: stockLocationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get New Orders.
     - GET /v2/orders/new
     - Fetch newly placed orders (order with status NEW).
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apiKey
     - parameter stockLocationId: (query) The ChannelEngine id of the stock location. (optional)
     - returns: RequestBuilder<CollectionOfMerchantOrderResponse> 
     */
    open class func orderGetNewWithRequestBuilder(stockLocationId: Int? = nil) -> RequestBuilder<CollectionOfMerchantOrderResponse> {
        let localVariablePath = "/v2/orders/new"
        let localVariableURLString = ChannelEngineMerchantApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "stockLocationId": stockLocationId?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CollectionOfMerchantOrderResponse>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Download Invoice.
     
     - parameter merchantOrderNo: (path) The unique order reference as used by the merchant. 
     - parameter useCustomerCulture: (query) Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orderInvoice(merchantOrderNo: String, useCustomerCulture: Bool? = nil, apiResponseQueue: DispatchQueue = ChannelEngineMerchantApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        orderInvoiceWithRequestBuilder(merchantOrderNo: merchantOrderNo, useCustomerCulture: useCustomerCulture).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Download Invoice.
     - GET /v2/orders/{merchantOrderNo}/invoice
     - Generates the ChannelEngine VAT invoice for this order in PDF.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apiKey
     - parameter merchantOrderNo: (path) The unique order reference as used by the merchant. 
     - parameter useCustomerCulture: (query) Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     - returns: RequestBuilder<URL> 
     */
    open class func orderInvoiceWithRequestBuilder(merchantOrderNo: String, useCustomerCulture: Bool? = nil) -> RequestBuilder<URL> {
        var localVariablePath = "/v2/orders/{merchantOrderNo}/invoice"
        let merchantOrderNoPreEscape = "\(APIHelper.mapValueToPathItem(merchantOrderNo))"
        let merchantOrderNoPostEscape = merchantOrderNoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{merchantOrderNo}", with: merchantOrderNoPostEscape, options: .literal, range: nil)
        let localVariableURLString = ChannelEngineMerchantApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "useCustomerCulture": useCustomerCulture?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Download Packing Slip.
     
     - parameter merchantOrderNo: (path) The unique order reference as used by the merchant. 
     - parameter useCustomerCulture: (query) Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orderPackingSlip(merchantOrderNo: String, useCustomerCulture: Bool? = nil, apiResponseQueue: DispatchQueue = ChannelEngineMerchantApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) {
        orderPackingSlipWithRequestBuilder(merchantOrderNo: merchantOrderNo, useCustomerCulture: useCustomerCulture).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Download Packing Slip.
     - GET /v2/orders/{merchantOrderNo}/packingslip
     - Generates the ChannelEngine packing slip for this order in PDF.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apiKey
     - parameter merchantOrderNo: (path) The unique order reference as used by the merchant. 
     - parameter useCustomerCulture: (query) Generate the invoice in the billing address&#39; country&#39;s language. (optional, default to false)
     - returns: RequestBuilder<URL> 
     */
    open class func orderPackingSlipWithRequestBuilder(merchantOrderNo: String, useCustomerCulture: Bool? = nil) -> RequestBuilder<URL> {
        var localVariablePath = "/v2/orders/{merchantOrderNo}/packingslip"
        let merchantOrderNoPreEscape = "\(APIHelper.mapValueToPathItem(merchantOrderNo))"
        let merchantOrderNoPostEscape = merchantOrderNoPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{merchantOrderNo}", with: merchantOrderNoPostEscape, options: .literal, range: nil)
        let localVariableURLString = ChannelEngineMerchantApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "useCustomerCulture": useCustomerCulture?.encodeToJSON(),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update Comment.
     
     - parameter merchantOrderCommentUpdateRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func orderUpdate(merchantOrderCommentUpdateRequest: MerchantOrderCommentUpdateRequest? = nil, apiResponseQueue: DispatchQueue = ChannelEngineMerchantApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApiResponse?, _ error: Error?) -> Void)) {
        orderUpdateWithRequestBuilder(merchantOrderCommentUpdateRequest: merchantOrderCommentUpdateRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Comment.
     - PUT /v2/orders/comment
     - Update the merchant comment for an order. Either the ChannelEngine order id or the<br />merchant order number can be used for updating a comment.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apiKey
     - parameter merchantOrderCommentUpdateRequest: (body)  (optional)
     - returns: RequestBuilder<ApiResponse> 
     */
    open class func orderUpdateWithRequestBuilder(merchantOrderCommentUpdateRequest: MerchantOrderCommentUpdateRequest? = nil) -> RequestBuilder<ApiResponse> {
        let localVariablePath = "/v2/orders/comment"
        let localVariableURLString = ChannelEngineMerchantApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: merchantOrderCommentUpdateRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiResponse>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}

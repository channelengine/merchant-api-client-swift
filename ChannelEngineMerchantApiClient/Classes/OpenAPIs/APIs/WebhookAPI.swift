//
// WebhookAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class WebhookAPI {

    /**
     Create Webhook.
     
     - parameter merchantWebhookRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func webhooksCreate(merchantWebhookRequest: MerchantWebhookRequest? = nil, apiResponseQueue: DispatchQueue = ChannelEngineMerchantApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApiResponse?, _ error: Error?) -> Void)) {
        webhooksCreateWithRequestBuilder(merchantWebhookRequest: merchantWebhookRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create Webhook.
     - POST /v2/webhooks
     - Create a new webhook in the ChannelEngine.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apiKey
     - parameter merchantWebhookRequest: (body)  (optional)
     - returns: RequestBuilder<ApiResponse> 
     */
    open class func webhooksCreateWithRequestBuilder(merchantWebhookRequest: MerchantWebhookRequest? = nil) -> RequestBuilder<ApiResponse> {
        let localVariablePath = "/v2/webhooks"
        let localVariableURLString = ChannelEngineMerchantApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: merchantWebhookRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiResponse>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Delete Webhook.
     
     - parameter webhookName: (path) The unique name of a webhook you want to delete. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func webhooksDelete(webhookName: String, apiResponseQueue: DispatchQueue = ChannelEngineMerchantApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApiResponse?, _ error: Error?) -> Void)) {
        webhooksDeleteWithRequestBuilder(webhookName: webhookName).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete Webhook.
     - DELETE /v2/webhooks/{webhookName}
     - Delete a webhook based on the webhook name.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apiKey
     - parameter webhookName: (path) The unique name of a webhook you want to delete. 
     - returns: RequestBuilder<ApiResponse> 
     */
    open class func webhooksDeleteWithRequestBuilder(webhookName: String) -> RequestBuilder<ApiResponse> {
        var localVariablePath = "/v2/webhooks/{webhookName}"
        let webhookNamePreEscape = "\(APIHelper.mapValueToPathItem(webhookName))"
        let webhookNamePostEscape = webhookNamePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{webhookName}", with: webhookNamePostEscape, options: .literal, range: nil)
        let localVariableURLString = ChannelEngineMerchantApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiResponse>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Get Webhooks.
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func webhooksGetAll(apiResponseQueue: DispatchQueue = ChannelEngineMerchantApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: CollectionOfMerchantWebhookResponse?, _ error: Error?) -> Void)) {
        webhooksGetAllWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get Webhooks.
     - GET /v2/webhooks
     - Get all webhooks created in the ChannelEngine.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apiKey
     - returns: RequestBuilder<CollectionOfMerchantWebhookResponse> 
     */
    open class func webhooksGetAllWithRequestBuilder() -> RequestBuilder<CollectionOfMerchantWebhookResponse> {
        let localVariablePath = "/v2/webhooks"
        let localVariableURLString = ChannelEngineMerchantApiClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CollectionOfMerchantWebhookResponse>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }

    /**
     Update Webhook.
     
     - parameter merchantWebhookRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func webhooksUpdate(merchantWebhookRequest: MerchantWebhookRequest? = nil, apiResponseQueue: DispatchQueue = ChannelEngineMerchantApiClientAPI.apiResponseQueue, completion: @escaping ((_ data: ApiResponse?, _ error: Error?) -> Void)) {
        webhooksUpdateWithRequestBuilder(merchantWebhookRequest: merchantWebhookRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update Webhook.
     - PUT /v2/webhooks
     - Update a webhook in the ChannelEngine.
     - API Key:
       - type: apiKey apikey (QUERY)
       - name: apiKey
     - parameter merchantWebhookRequest: (body)  (optional)
     - returns: RequestBuilder<ApiResponse> 
     */
    open class func webhooksUpdateWithRequestBuilder(merchantWebhookRequest: MerchantWebhookRequest? = nil) -> RequestBuilder<ApiResponse> {
        let localVariablePath = "/v2/webhooks"
        let localVariableURLString = ChannelEngineMerchantApiClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: merchantWebhookRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ApiResponse>.Type = ChannelEngineMerchantApiClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters)
    }
}
